(ns magic-mirror-display.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [clojure.string :as str]
   [accountant.core :as accountant]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<! go]]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(def state (atom {:music
                  {:artist "Artist Goes Here"
                   :song "Song title goes here"}}))

(def weather-state (atom nil))

(def timer (atom (js/Date.)))

(defonce time-updater (js/setInterval
                        #(reset! timer (js/Date.)) 1000))

(defn fetch-weather []
  (go (let [resp (<! (http/get "/weather"))
            body (:body resp)]
        (reset! weather-state body))))

(defonce weather-updater (js/setInterval #(fetch-weather) 5000))

(defn clock []
  (let [time-str (-> @timer
                     .toTimeString
                     (str/split " ")
                     first)
        date-str (-> @timer
                     .toDateString)]
    [:div
      [:div time-str]
      [:div date-str]]))

(defn music-display []
  (fn []
    (let [music (:music @state)]
      [:span.main
       [:marquee [:h1 "NOW PLAYING"]]
       [:h2 (:artist music)]
       [:h2 (:song music)]])))

(defn weather-display []
  (fn []
    (let [weather @weather-state]
      (if (nil? weather)
        [:span [:p "Loading weather...."]]
        (let [icon (get-in weather [:weather 0 :icon])
              iconurl (str "https://openweathermap.org/img/w/" icon ".png")
              curr-temp (get-in weather [:main :temp])
              max-temp (get-in weather [:main :temp_max])
              min-temp (get-in weather [:main :temp_min])]
          [:span
            [:img {:src iconurl}]
            [:h2 "Current " curr-temp " °F"]
            [:h2 "Max " max-temp " °F"]
            [:h2 "Min " min-temp " °F"]])))))

(defn home-page []
  (fn []
    [:span.main
     [clock]
     [music-display]
     [weather-display]]))

(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of magic-mirror-display"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of magic-mirror-display")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))


(defn about-page []
  (fn [] [:span.main
          [:h1 "About magic-mirror-display"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       ;; [:header
       ;;  [:p [:a {:href (path-for :index)} "Home"] " | "
       ;;   [:a {:href (path-for :about)} "About magic-mirror-display"]]]
       [page]])))
       ;; [:footer
       ;;  [:p "magic-mirror-display was generated by the "
       ;;   [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
